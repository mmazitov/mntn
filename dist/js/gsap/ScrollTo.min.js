/*!
 * ScrollToPlugin 3.12.7
 * https://gsap.com
 *
 * @license Copyright 2025, GreenSock. All rights reserved.
 * Subject to the terms at https://gsap.com/standard-license or for Club GSAP members, the agreement issued with that membership.
 * @author: Jack Doyle, jack@greensock.com
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).window=e.window||{})}(this,(function(e){"use strict";function t(){return"undefined"!=typeof window}function o(){return c||t()&&(c=window.gsap)&&c.registerPlugin&&c}function n(e){return"string"==typeof e}function r(e){return"function"==typeof e}function l(e,t){var o="x"===t?"Width":"Height",n="scroll"+o,r="client"+o;return e===a||e===y||e===d?Math.max(y[n],d[n])-(a["inner"+o]||y[r]||d[r]):e[n]-e["offset"+o]}function i(e,t){var o="scroll"+("x"===t?"Left":"Top");return e===a&&(null!=e.pageXOffset?o="page"+t.toUpperCase()+"Offset":e=null!=y[o]?y:d),function(){return e[o]}}function s(e,t){if(!(e=g(e)[0])||!e.getBoundingClientRect)return console.warn("scrollTo target doesn't exist. Using 0")||{x:0,y:0};var o=e.getBoundingClientRect(),n=!t||t===a||t===d,r=n?{top:y.clientTop-(a.pageYOffset||y.scrollTop||d.scrollTop||0),left:y.clientLeft-(a.pageXOffset||y.scrollLeft||d.scrollLeft||0)}:t.getBoundingClientRect(),l={x:o.left-r.left,y:o.top-r.top};return!n&&t&&(l.x+=i(t,"x")(),l.y+=i(t,"y")()),l}function p(e,t,o,r,i){return isNaN(e)||"object"==typeof e?n(e)&&"="===e.charAt(1)?parseFloat(e.substr(2))*("-"===e.charAt(0)?-1:1)+r-i:"max"===e?l(t,o)-i:Math.min(l(t,o),s(e,t)[o]-i):parseFloat(e)-i}function f(){c=o(),t()&&c&&"undefined"!=typeof document&&document.body&&(a=window,d=document.body,y=document.documentElement,g=c.utils.toArray,c.config({autoKillThreshold:7}),x=c.config(),u=1)}var c,u,a,y,d,g,x,T,h={version:"3.12.7",name:"scrollTo",rawVars:1,register:function(e){c=e,f()},init:function(e,t,o,l,s){u||f();var y=this,d=c.getProperty(e,"scrollSnapType");y.isWin=e===a,y.target=e,y.tween=o,t=function(e,t,o,l){if(r(e)&&(e=e(t,o,l)),"object"!=typeof e)return n(e)&&"max"!==e&&"="!==e.charAt(1)?{x:e,y:e}:{y:e};if(e.nodeType)return{y:e,x:e};var i,s={};for(i in e)s[i]="onAutoKill"!==i&&r(e[i])?e[i](t,o,l):e[i];return s}(t,l,e,s),y.vars=t,y.autoKill=!!("autoKill"in t?t:x).autoKill,y.getX=i(e,"x"),y.getY=i(e,"y"),y.x=y.xPrev=y.getX(),y.y=y.yPrev=y.getY(),T=T||c.core.globals().ScrollTrigger,"smooth"===c.getProperty(e,"scrollBehavior")&&c.set(e,{scrollBehavior:"auto"}),d&&"none"!==d&&(y.snap=1,y.snapInline=e.style.scrollSnapType,e.style.scrollSnapType="none"),null!=t.x?(y.add(y,"x",y.x,p(t.x,e,"x",y.x,t.offsetX||0),l,s),y._props.push("scrollTo_x")):y.skipX=1,null!=t.y?(y.add(y,"y",y.y,p(t.y,e,"y",y.y,t.offsetY||0),l,s),y._props.push("scrollTo_y")):y.skipY=1},render:function(e,t){for(var o,n,r,i,s,p=t._pt,f=t.target,c=t.tween,u=t.autoKill,y=t.xPrev,d=t.yPrev,g=t.isWin,h=t.snap,v=t.snapInline;p;)p.r(e,p.d),p=p._next;o=g||!t.skipX?t.getX():y,r=(n=g||!t.skipY?t.getY():d)-d,i=o-y,s=x.autoKillThreshold,t.x<0&&(t.x=0),t.y<0&&(t.y=0),u&&(!t.skipX&&(s<i||i<-s)&&o<l(f,"x")&&(t.skipX=1),!t.skipY&&(s<r||r<-s)&&n<l(f,"y")&&(t.skipY=1),t.skipX&&t.skipY&&(c.kill(),t.vars.onAutoKill&&t.vars.onAutoKill.apply(c,t.vars.onAutoKillParams||[]))),g?a.scrollTo(t.skipX?o:t.x,t.skipY?n:t.y):(t.skipY||(f.scrollTop=t.y),t.skipX||(f.scrollLeft=t.x)),!h||1!==e&&0!==e||(n=f.scrollTop,o=f.scrollLeft,v?f.style.scrollSnapType=v:f.style.removeProperty("scroll-snap-type"),f.scrollTop=n+1,f.scrollLeft=o+1,f.scrollTop=n,f.scrollLeft=o),t.xPrev=t.x,t.yPrev=t.y,T&&T.update()},kill:function(e){var t="scrollTo"===e,o=this._props.indexOf(e);return!t&&"scrollTo_x"!==e||(this.skipX=1),!t&&"scrollTo_y"!==e||(this.skipY=1),-1<o&&this._props.splice(o,1),!this._props.length}};h.max=l,h.getOffset=s,h.buildGetter=i,h.config=function(e){for(var t in x||f()||(x=c.config()),e)x[t]=e[t]},o()&&c.registerPlugin(h),e.ScrollToPlugin=h,e.default=h,"undefined"==typeof window||window!==e?Object.defineProperty(e,"__esModule",{value:!0}):delete e.default}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3NhcC9TY3JvbGxUby5taW4uanMiLCJuYW1lcyI6WyJlIiwidCIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJzZWxmIiwid2luZG93IiwidGhpcyIsImwiLCJtIiwiZiIsImdzYXAiLCJyZWdpc3RlclBsdWdpbiIsIm4iLCJvIiwicCIsInIiLCJUIiwiaSIsImMiLCJNYXRoIiwibWF4IiwicSIsInBhZ2VYT2Zmc2V0IiwidG9VcHBlckNhc2UiLCJzIiwieSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNvbnNvbGUiLCJ3YXJuIiwieCIsInRvcCIsImNsaWVudFRvcCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwibGVmdCIsImNsaWVudExlZnQiLCJzY3JvbGxMZWZ0IiwiaXNOYU4iLCJjaGFyQXQiLCJwYXJzZUZsb2F0Iiwic3Vic3RyIiwibWluIiwidSIsImRvY3VtZW50IiwiYm9keSIsImRvY3VtZW50RWxlbWVudCIsInV0aWxzIiwidG9BcnJheSIsImNvbmZpZyIsImF1dG9LaWxsVGhyZXNob2xkIiwiaCIsImEiLCJ2IiwidmVyc2lvbiIsIm5hbWUiLCJyYXdWYXJzIiwicmVnaXN0ZXIiLCJpbml0IiwiZ2V0UHJvcGVydHkiLCJpc1dpbiIsInRhcmdldCIsInR3ZWVuIiwibm9kZVR5cGUiLCJ2YXJzIiwiYXV0b0tpbGwiLCJnZXRYIiwiZ2V0WSIsInhQcmV2IiwieVByZXYiLCJjb3JlIiwiZ2xvYmFscyIsIlNjcm9sbFRyaWdnZXIiLCJzZXQiLCJzY3JvbGxCZWhhdmlvciIsInNuYXAiLCJzbmFwSW5saW5lIiwic3R5bGUiLCJzY3JvbGxTbmFwVHlwZSIsImFkZCIsIm9mZnNldFgiLCJfcHJvcHMiLCJwdXNoIiwic2tpcFgiLCJvZmZzZXRZIiwic2tpcFkiLCJyZW5kZXIiLCJfcHQiLCJkIiwiZyIsIl9uZXh0Iiwia2lsbCIsIm9uQXV0b0tpbGwiLCJhcHBseSIsIm9uQXV0b0tpbGxQYXJhbXMiLCJzY3JvbGxUbyIsInJlbW92ZVByb3BlcnR5IiwidXBkYXRlIiwiaW5kZXhPZiIsInNwbGljZSIsImxlbmd0aCIsImdldE9mZnNldCIsImJ1aWxkR2V0dGVyIiwiU2Nyb2xsVG9QbHVnaW4iLCJkZWZhdWx0IiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSJdLCJzb3VyY2VzIjpbImdzYXAvU2Nyb2xsVG8ubWluLmpzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztDQVNDLFNBQVdBLEVBQUdDLEdBQ2QsaUJBQW1CQyxTQUFXLG9CQUFzQkMsT0FDakRGLEVBQUVDLFNBQ0YsbUJBQXFCRSxRQUFVQSxPQUFPQyxJQUNyQ0QsT0FBTyxDQUFDLFdBQVlILEdBQ3BCQSxHQUFJRCxFQUFJQSxHQUFLTSxNQUFNQyxPQUFTUCxFQUFFTyxRQUFVLENBQUMsRUFDN0MsQ0FOQSxDQU1FQyxNQUFNLFNBQVVSLEdBQ2xCLGFBQ0EsU0FBU1MsSUFDUixNQUFPLG9CQUFzQkYsTUFDOUIsQ0FDQSxTQUFTRyxJQUNSLE9BQU9DLEdBQU1GLE1BQVFFLEVBQUlKLE9BQU9LLE9BQVNELEVBQUVFLGdCQUFrQkYsQ0FDOUQsQ0FDQSxTQUFTRyxFQUFFZCxHQUNWLE1BQU8saUJBQW1CQSxDQUMzQixDQUNBLFNBQVNlLEVBQUVmLEdBQ1YsTUFBTyxtQkFBcUJBLENBQzdCLENBQ0EsU0FBU2dCLEVBQUVoQixFQUFHQyxHQUNiLElBQUljLEVBQUksTUFBUWQsRUFBSSxRQUFVLFNBQzdCYSxFQUFJLFNBQVdDLEVBQ2ZFLEVBQUksU0FBV0YsRUFDaEIsT0FBT2YsSUFBTWtCLEdBQUtsQixJQUFNbUIsR0FBS25CLElBQU1vQixFQUNoQ0MsS0FBS0MsSUFBSUgsRUFBRUwsR0FBSU0sRUFBRU4sS0FBT0ksRUFBRSxRQUFVSCxJQUFNSSxFQUFFRixJQUFNRyxFQUFFSCxJQUNwRGpCLEVBQUVjLEdBQUtkLEVBQUUsU0FBV2UsRUFDeEIsQ0FDQSxTQUFTUSxFQUFFdkIsRUFBR0MsR0FDYixJQUFJYyxFQUFJLFVBQVksTUFBUWQsRUFBSSxPQUFTLE9BQ3pDLE9BQ0NELElBQU1r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LFFBQVV4RixFQUNRLG9CQUFYVixRQUEwQkEsU0FBV1AsRUFDL0MwRyxPQUFPQyxlQUFlM0csRUFBRyxhQUFjLENBQUU0RyxPQUFPLFdBRXpDNUcsRUFBRXlHLE9BRVgiLCJpZ25vcmVMaXN0IjpbXSwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBTY3JvbGxUb1BsdWdpbiAzLjEyLjdcbiAqIGh0dHBzOi8vZ3NhcC5jb21cbiAqXG4gKiBAbGljZW5zZSBDb3B5cmlnaHQgMjAyNSwgR3JlZW5Tb2NrLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogU3ViamVjdCB0byB0aGUgdGVybXMgYXQgaHR0cHM6Ly9nc2FwLmNvbS9zdGFuZGFyZC1saWNlbnNlIG9yIGZvciBDbHViIEdTQVAgbWVtYmVycywgdGhlIGFncmVlbWVudCBpc3N1ZWQgd2l0aCB0aGF0IG1lbWJlcnNoaXAuXG4gKiBAYXV0aG9yOiBKYWNrIERveWxlLCBqYWNrQGdyZWVuc29jay5jb21cbiAqL1xuXG4hKGZ1bmN0aW9uIChlLCB0KSB7XG5cdFwib2JqZWN0XCIgPT0gdHlwZW9mIGV4cG9ydHMgJiYgXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgbW9kdWxlXG5cdFx0PyB0KGV4cG9ydHMpXG5cdFx0OiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGRlZmluZSAmJiBkZWZpbmUuYW1kXG5cdFx0XHQ/IGRlZmluZShbXCJleHBvcnRzXCJdLCB0KVxuXHRcdFx0OiB0KCgoZSA9IGUgfHwgc2VsZikud2luZG93ID0gZS53aW5kb3cgfHwge30pKTtcbn0pKHRoaXMsIGZ1bmN0aW9uIChlKSB7XG5cdFwidXNlIHN0cmljdFwiO1xuXHRmdW5jdGlvbiBsKCkge1xuXHRcdHJldHVybiBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3c7XG5cdH1cblx0ZnVuY3Rpb24gbSgpIHtcblx0XHRyZXR1cm4gZiB8fCAobCgpICYmIChmID0gd2luZG93LmdzYXApICYmIGYucmVnaXN0ZXJQbHVnaW4gJiYgZik7XG5cdH1cblx0ZnVuY3Rpb24gbihlKSB7XG5cdFx0cmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIGU7XG5cdH1cblx0ZnVuY3Rpb24gbyhlKSB7XG5cdFx0cmV0dXJuIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgZTtcblx0fVxuXHRmdW5jdGlvbiBwKGUsIHQpIHtcblx0XHR2YXIgbyA9IFwieFwiID09PSB0ID8gXCJXaWR0aFwiIDogXCJIZWlnaHRcIixcblx0XHRcdG4gPSBcInNjcm9sbFwiICsgbyxcblx0XHRcdHIgPSBcImNsaWVudFwiICsgbztcblx0XHRyZXR1cm4gZSA9PT0gVCB8fCBlID09PSBpIHx8IGUgPT09IGNcblx0XHRcdD8gTWF0aC5tYXgoaVtuXSwgY1tuXSkgLSAoVFtcImlubmVyXCIgKyBvXSB8fCBpW3JdIHx8IGNbcl0pXG5cdFx0XHQ6IGVbbl0gLSBlW1wib2Zmc2V0XCIgKyBvXTtcblx0fVxuXHRmdW5jdGlvbiBxKGUsIHQpIHtcblx0XHR2YXIgbyA9IFwic2Nyb2xsXCIgKyAoXCJ4XCIgPT09IHQgPyBcIkxlZnRcIiA6IFwiVG9wXCIpO1xuXHRcdHJldHVybiAoXG5cdFx0XHRlID09PSBUICYmXG5cdFx0XHRcdChudWxsICE9IGUucGFnZVhPZmZzZXRcblx0XHRcdFx0XHQ/IChvID0gXCJwYWdlXCIgKyB0LnRvVXBwZXJDYXNlKCkgKyBcIk9mZnNldFwiKVxuXHRcdFx0XHRcdDogKGUgPSBudWxsICE9IGlbb10gPyBpIDogYykpLFxuXHRcdFx0ZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4gZVtvXTtcblx0XHRcdH1cblx0XHQpO1xuXHR9XG5cdGZ1bmN0aW9uIHMoZSwgdCkge1xuXHRcdGlmICghKGUgPSB5KGUpWzBdKSB8fCAhZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QpXG5cdFx0XHRyZXR1cm4gY29uc29sZS53YXJuKFwic2Nyb2xsVG8gdGFyZ2V0IGRvZXNuJ3QgZXhpc3QuIFVzaW5nIDBcIikgfHwgeyB4OiAwLCB5OiAwIH07XG5cdFx0dmFyIG8gPSBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuXHRcdFx0biA9ICF0IHx8IHQgPT09IFQgfHwgdCA9PT0gYyxcblx0XHRcdHIgPSBuXG5cdFx0XHRcdD8ge1xuXHRcdFx0XHRcdFx0dG9wOiBpLmNsaWVudFRvcCAtIChULnBhZ2VZT2Zmc2V0IHx8IGkuc2Nyb2xsVG9wIHx8IGMuc2Nyb2xsVG9wIHx8IDApLFxuXHRcdFx0XHRcdFx0bGVmdDogaS5jbGllbnRMZWZ0IC0gKFQucGFnZVhPZmZzZXQgfHwgaS5zY3JvbGxMZWZ0IHx8IGMuc2Nyb2xsTGVmdCB8fCAwKSxcblx0XHRcdFx0XHR9XG5cdFx0XHRcdDogdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcblx0XHRcdGwgPSB7IHg6IG8ubGVmdCAtIHIubGVmdCwgeTogby50b3AgLSByLnRvcCB9O1xuXHRcdHJldHVybiAhbiAmJiB0ICYmICgobC54ICs9IHEodCwgXCJ4XCIpKCkpLCAobC55ICs9IHEodCwgXCJ5XCIpKCkpKSwgbDtcblx0fVxuXHRmdW5jdGlvbiB0KGUsIHQsIG8sIHIsIGwpIHtcblx0XHRyZXR1cm4gaXNOYU4oZSkgfHwgXCJvYmplY3RcIiA9PSB0eXBlb2YgZVxuXHRcdFx0PyBuKGUpICYmIFwiPVwiID09PSBlLmNoYXJBdCgxKVxuXHRcdFx0XHQ/IHBhcnNlRmxvYXQoZS5zdWJzdHIoMikpICogKFwiLVwiID09PSBlLmNoYXJBdCgwKSA/IC0xIDogMSkgKyByIC0gbFxuXHRcdFx0XHQ6IFwibWF4XCIgPT09IGVcblx0XHRcdFx0XHQ/IHAodCwgbykgLSBsXG5cdFx0XHRcdFx0OiBNYXRoLm1pbihwKHQsIG8pLCBzKGUsIHQpW29dIC0gbClcblx0XHRcdDogcGFyc2VGbG9hdChlKSAtIGw7XG5cdH1cblx0ZnVuY3Rpb24gdSgpIHtcblx0XHQoZiA9IG0oKSksXG5cdFx0XHRsKCkgJiZcblx0XHRcdFx0ZiAmJlxuXHRcdFx0XHRcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBkb2N1bWVudCAmJlxuXHRcdFx0XHRkb2N1bWVudC5ib2R5ICYmXG5cdFx0XHRcdCgoVCA9IHdpbmRvdyksXG5cdFx0XHRcdChjID0gZG9jdW1lbnQuYm9keSksXG5cdFx0XHRcdChpID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSxcblx0XHRcdFx0KHkgPSBmLnV0aWxzLnRvQXJyYXkpLFxuXHRcdFx0XHRmLmNvbmZpZyh7IGF1dG9LaWxsVGhyZXNob2xkOiA3IH0pLFxuXHRcdFx0XHQoaCA9IGYuY29uZmlnKCkpLFxuXHRcdFx0XHQoYSA9IDEpKTtcblx0fVxuXHR2YXIgZixcblx0XHRhLFxuXHRcdFQsXG5cdFx0aSxcblx0XHRjLFxuXHRcdHksXG5cdFx0aCxcblx0XHR2LFxuXHRcdHIgPSB7XG5cdFx0XHR2ZXJzaW9uOiBcIjMuMTIuN1wiLFxuXHRcdFx0bmFtZTogXCJzY3JvbGxUb1wiLFxuXHRcdFx0cmF3VmFyczogMSxcblx0XHRcdHJlZ2lzdGVyOiBmdW5jdGlvbiByZWdpc3RlcihlKSB7XG5cdFx0XHRcdChmID0gZSksIHUoKTtcblx0XHRcdH0sXG5cdFx0XHRpbml0OiBmdW5jdGlvbiBpbml0KGUsIHIsIGwsIGksIHMpIHtcblx0XHRcdFx0YSB8fCB1KCk7XG5cdFx0XHRcdHZhciBwID0gdGhpcyxcblx0XHRcdFx0XHRjID0gZi5nZXRQcm9wZXJ0eShlLCBcInNjcm9sbFNuYXBUeXBlXCIpO1xuXHRcdFx0XHQocC5pc1dpbiA9IGUgPT09IFQpLFxuXHRcdFx0XHRcdChwLnRhcmdldCA9IGUpLFxuXHRcdFx0XHRcdChwLnR3ZWVuID0gbCksXG5cdFx0XHRcdFx0KHIgPSAoZnVuY3Rpb24gX2NsZWFuKGUsIHQsIHIsIGwpIHtcblx0XHRcdFx0XHRcdGlmICgobyhlKSAmJiAoZSA9IGUodCwgciwgbCkpLCBcIm9iamVjdFwiICE9IHR5cGVvZiBlKSlcblx0XHRcdFx0XHRcdFx0cmV0dXJuIG4oZSkgJiYgXCJtYXhcIiAhPT0gZSAmJiBcIj1cIiAhPT0gZS5jaGFyQXQoMSkgPyB7IHg6IGUsIHk6IGUgfSA6IHsgeTogZSB9O1xuXHRcdFx0XHRcdFx0aWYgKGUubm9kZVR5cGUpIHJldHVybiB7IHk6IGUsIHg6IGUgfTtcblx0XHRcdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdFx0XHRzID0ge307XG5cdFx0XHRcdFx0XHRmb3IgKGkgaW4gZSkgc1tpXSA9IFwib25BdXRvS2lsbFwiICE9PSBpICYmIG8oZVtpXSkgPyBlW2ldKHQsIHIsIGwpIDogZVtpXTtcblx0XHRcdFx0XHRcdHJldHVybiBzO1xuXHRcdFx0XHRcdH0pKHIsIGksIGUsIHMpKSxcblx0XHRcdFx0XHQocC52YXJzID0gciksXG5cdFx0XHRcdFx0KHAuYXV0b0tpbGwgPSAhIShcImF1dG9LaWxsXCIgaW4gciA/IHIgOiBoKS5hdXRvS2lsbCksXG5cdFx0XHRcdFx0KHAuZ2V0WCA9IHEoZSwgXCJ4XCIpKSxcblx0XHRcdFx0XHQocC5nZXRZID0gcShlLCBcInlcIikpLFxuXHRcdFx0XHRcdChwLnggPSBwLnhQcmV2ID0gcC5nZXRYKCkpLFxuXHRcdFx0XHRcdChwLnkgPSBwLnlQcmV2ID0gcC5nZXRZKCkpLFxuXHRcdFx0XHRcdCh2ID0gdiB8fCBmLmNvcmUuZ2xvYmFscygpLlNjcm9sbFRyaWdnZXIpLFxuXHRcdFx0XHRcdFwic21vb3RoXCIgPT09IGYuZ2V0UHJvcGVydHkoZSwgXCJzY3JvbGxCZWhhdmlvclwiKSAmJiBmLnNldChlLCB7IHNjcm9sbEJlaGF2aW9yOiBcImF1dG9cIiB9KSxcblx0XHRcdFx0XHRjICYmXG5cdFx0XHRcdFx0XHRcIm5vbmVcIiAhPT0gYyAmJlxuXHRcdFx0XHRcdFx0KChwLnNuYXAgPSAxKSxcblx0XHRcdFx0XHRcdChwLnNuYXBJbmxpbmUgPSBlLnN0eWxlLnNjcm9sbFNuYXBUeXBlKSxcblx0XHRcdFx0XHRcdChlLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gXCJub25lXCIpKSxcblx0XHRcdFx0XHRudWxsICE9IHIueFxuXHRcdFx0XHRcdFx0PyAocC5hZGQocCwgXCJ4XCIsIHAueCwgdChyLngsIGUsIFwieFwiLCBwLngsIHIub2Zmc2V0WCB8fCAwKSwgaSwgcyksXG5cdFx0XHRcdFx0XHRcdHAuX3Byb3BzLnB1c2goXCJzY3JvbGxUb194XCIpKVxuXHRcdFx0XHRcdFx0OiAocC5za2lwWCA9IDEpLFxuXHRcdFx0XHRcdG51bGwgIT0gci55XG5cdFx0XHRcdFx0XHQ/IChwLmFkZChwLCBcInlcIiwgcC55LCB0KHIueSwgZSwgXCJ5XCIsIHAueSwgci5vZmZzZXRZIHx8IDApLCBpLCBzKSxcblx0XHRcdFx0XHRcdFx0cC5fcHJvcHMucHVzaChcInNjcm9sbFRvX3lcIikpXG5cdFx0XHRcdFx0XHQ6IChwLnNraXBZID0gMSk7XG5cdFx0XHR9LFxuXHRcdFx0cmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoZSwgdCkge1xuXHRcdFx0XHRmb3IgKFxuXHRcdFx0XHRcdHZhciBvLFxuXHRcdFx0XHRcdFx0bixcblx0XHRcdFx0XHRcdHIsXG5cdFx0XHRcdFx0XHRsLFxuXHRcdFx0XHRcdFx0aSxcblx0XHRcdFx0XHRcdHMgPSB0Ll9wdCxcblx0XHRcdFx0XHRcdGMgPSB0LnRhcmdldCxcblx0XHRcdFx0XHRcdHUgPSB0LnR3ZWVuLFxuXHRcdFx0XHRcdFx0ZiA9IHQuYXV0b0tpbGwsXG5cdFx0XHRcdFx0XHRhID0gdC54UHJldixcblx0XHRcdFx0XHRcdHkgPSB0LnlQcmV2LFxuXHRcdFx0XHRcdFx0ZCA9IHQuaXNXaW4sXG5cdFx0XHRcdFx0XHRnID0gdC5zbmFwLFxuXHRcdFx0XHRcdFx0eCA9IHQuc25hcElubGluZTtcblx0XHRcdFx0XHRzO1xuXG5cdFx0XHRcdClcblx0XHRcdFx0XHRzLnIoZSwgcy5kKSwgKHMgPSBzLl9uZXh0KTtcblx0XHRcdFx0KG8gPSBkIHx8ICF0LnNraXBYID8gdC5nZXRYKCkgOiBhKSxcblx0XHRcdFx0XHQociA9IChuID0gZCB8fCAhdC5za2lwWSA/IHQuZ2V0WSgpIDogeSkgLSB5KSxcblx0XHRcdFx0XHQobCA9IG8gLSBhKSxcblx0XHRcdFx0XHQoaSA9IGguYXV0b0tpbGxUaHJlc2hvbGQpLFxuXHRcdFx0XHRcdHQueCA8IDAgJiYgKHQueCA9IDApLFxuXHRcdFx0XHRcdHQueSA8IDAgJiYgKHQueSA9IDApLFxuXHRcdFx0XHRcdGYgJiZcblx0XHRcdFx0XHRcdCghdC5za2lwWCAmJiAoaSA8IGwgfHwgbCA8IC1pKSAmJiBvIDwgcChjLCBcInhcIikgJiYgKHQuc2tpcFggPSAxKSxcblx0XHRcdFx0XHRcdCF0LnNraXBZICYmIChpIDwgciB8fCByIDwgLWkpICYmIG4gPCBwKGMsIFwieVwiKSAmJiAodC5za2lwWSA9IDEpLFxuXHRcdFx0XHRcdFx0dC5za2lwWCAmJlxuXHRcdFx0XHRcdFx0XHR0LnNraXBZICYmXG5cdFx0XHRcdFx0XHRcdCh1LmtpbGwoKSxcblx0XHRcdFx0XHRcdFx0dC52YXJzLm9uQXV0b0tpbGwgJiYgdC52YXJzLm9uQXV0b0tpbGwuYXBwbHkodSwgdC52YXJzLm9uQXV0b0tpbGxQYXJhbXMgfHwgW10pKSksXG5cdFx0XHRcdFx0ZFxuXHRcdFx0XHRcdFx0PyBULnNjcm9sbFRvKHQuc2tpcFggPyBvIDogdC54LCB0LnNraXBZID8gbiA6IHQueSlcblx0XHRcdFx0XHRcdDogKHQuc2tpcFkgfHwgKGMuc2Nyb2xsVG9wID0gdC55KSwgdC5za2lwWCB8fCAoYy5zY3JvbGxMZWZ0ID0gdC54KSksXG5cdFx0XHRcdFx0IWcgfHxcblx0XHRcdFx0XHRcdCgxICE9PSBlICYmIDAgIT09IGUpIHx8XG5cdFx0XHRcdFx0XHQoKG4gPSBjLnNjcm9sbFRvcCksXG5cdFx0XHRcdFx0XHQobyA9IGMuc2Nyb2xsTGVmdCksXG5cdFx0XHRcdFx0XHR4ID8gKGMuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSB4KSA6IGMuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJzY3JvbGwtc25hcC10eXBlXCIpLFxuXHRcdFx0XHRcdFx0KGMuc2Nyb2xsVG9wID0gbiArIDEpLFxuXHRcdFx0XHRcdFx0KGMuc2Nyb2xsTGVmdCA9IG8gKyAxKSxcblx0XHRcdFx0XHRcdChjLnNjcm9sbFRvcCA9IG4pLFxuXHRcdFx0XHRcdFx0KGMuc2Nyb2xsTGVmdCA9IG8pKSxcblx0XHRcdFx0XHQodC54UHJldiA9IHQueCksXG5cdFx0XHRcdFx0KHQueVByZXYgPSB0LnkpLFxuXHRcdFx0XHRcdHYgJiYgdi51cGRhdGUoKTtcblx0XHRcdH0sXG5cdFx0XHRraWxsOiBmdW5jdGlvbiBraWxsKGUpIHtcblx0XHRcdFx0dmFyIHQgPSBcInNjcm9sbFRvXCIgPT09IGUsXG5cdFx0XHRcdFx0byA9IHRoaXMuX3Byb3BzLmluZGV4T2YoZSk7XG5cdFx0XHRcdHJldHVybiAoXG5cdFx0XHRcdFx0KCF0ICYmIFwic2Nyb2xsVG9feFwiICE9PSBlKSB8fCAodGhpcy5za2lwWCA9IDEpLFxuXHRcdFx0XHRcdCghdCAmJiBcInNjcm9sbFRvX3lcIiAhPT0gZSkgfHwgKHRoaXMuc2tpcFkgPSAxKSxcblx0XHRcdFx0XHQtMSA8IG8gJiYgdGhpcy5fcHJvcHMuc3BsaWNlKG8sIDEpLFxuXHRcdFx0XHRcdCF0aGlzLl9wcm9wcy5sZW5ndGhcblx0XHRcdFx0KTtcblx0XHRcdH0sXG5cdFx0fTtcblx0KHIubWF4ID0gcCksXG5cdFx0KHIuZ2V0T2Zmc2V0ID0gcyksXG5cdFx0KHIuYnVpbGRHZXR0ZXIgPSBxKSxcblx0XHQoci5jb25maWcgPSBmdW5jdGlvbiAoZSkge1xuXHRcdFx0Zm9yICh2YXIgdCBpbiAoaCB8fCB1KCkgfHwgKGggPSBmLmNvbmZpZygpKSwgZSkpIGhbdF0gPSBlW3RdO1xuXHRcdH0pLFxuXHRcdG0oKSAmJiBmLnJlZ2lzdGVyUGx1Z2luKHIpLFxuXHRcdChlLlNjcm9sbFRvUGx1Z2luID0gciksXG5cdFx0KGUuZGVmYXVsdCA9IHIpO1xuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiB8fCB3aW5kb3cgIT09IGUpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6ICEwIH0pO1xuXHR9IGVsc2Uge1xuXHRcdGRlbGV0ZSBlLmRlZmF1bHQ7XG5cdH1cbn0pO1xuIl19
